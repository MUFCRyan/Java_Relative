package com.ryan.hash;

/**
 * Created by zhaofengchun on 2017/11/6.
 * 练习 5.15
 *      a. 利用本章末尾描述的算法实现字谜程序
 *      b. 通过存储每个单词 W 及 W 的所有前缀，可以大大加快运行速度（若 W 的一个前缀刚好是词典中的一个单词，那就将其作为实际的单词来存储）。
 *         虽然这看起来极大地增加了散列表的大小，但实际并非如此，因为许多单词有相同的前缀。当以某个特定的方向执行一次扫描时，如果被查找的单词
 *         甚至作为前缀都不在散列表中，那么在这个方向上的扫描就可以及早终止。利用这种想法编写一个改进的程序来解决字谜游戏问题。
 *      c. 如果我们愿意牺牲散列表 ADT 的性能，那么可以在(b)部分使程序加速：例如，如果我们刚刚计算出 "excel" 的散列函数，那就不必从头开始计算 "excels"
 *         的散列函数。调整散列函数使得其能够利用前面的计算。
 *      d. 在第二章我们建议使用折半查找。把使用前缀的想法结合到你的折半查找的算法中。修改工作应该简单。哪个算法更快？
 */

public class E15_Charades {
    // TODO: 2017/11/6 暂不实现，等有时间时再完成
}
